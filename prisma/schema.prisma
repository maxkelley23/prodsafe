// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true) @map("is_active")
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts         Account[]
  sessions         Session[]
  profile          UserProfile?
  rateLimitEntries RateLimitEntry[]

  @@map("users")
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique @map("user_id")
  bio               String?
  website           String?
  location          String?
  company           String?
  githubUsername    String?  @map("github_username")
  linkedinUsername  String?  @map("linkedin_username")
  twitterUsername   String?  @map("twitter_username")
  timezone          String?  @default("UTC")
  language          String?  @default("en")
  theme             String?  @default("system")
  emailNotifications Boolean  @default(true) @map("email_notifications")
  securityAlerts    Boolean  @default(true) @map("security_alerts")
  marketingEmails   Boolean  @default(false) @map("marketing_emails")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Rate limiting model
model RateLimitEntry {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  ip        String?
  endpoint  String
  attempts  Int      @default(1)
  windowStart DateTime @map("window_start")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, endpoint])
  @@index([ip, endpoint])
  @@index([expiresAt])
  @@map("rate_limit_entries")
}

// Security audit logs
model SecurityLog {
  id        String           @id @default(cuid())
  userId    String?          @map("user_id")
  action    SecurityAction
  details   Json?
  ip        String?
  userAgent String?          @map("user_agent")
  success   Boolean          @default(true)
  createdAt DateTime         @default(now()) @map("created_at")

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("security_logs")
}

enum UserRole {
  USER
  ADMIN
  SECURITY_LEAD
}

enum SecurityAction {
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  PASSWORD_CHANGE
  EMAIL_CHANGE
  PROFILE_UPDATE
  MFA_ENABLED
  MFA_DISABLED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  RATE_LIMIT_EXCEEDED
  SUSPICIOUS_ACTIVITY
}
